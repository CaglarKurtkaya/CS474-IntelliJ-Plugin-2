

AbstractFactory{
    interfaceName : "AbstractFactory"
    methodName1 : "getName"
    methodName2 : "create"
}

Builder{
    variableName1 = "children"
    variableName2 = "child"
    methodName1 = "add"
    methodName2 = "iterator"
    methodName3 = "buildPartA"
    methodName4 = "getResult"
    interfaceName = "Builder"
    fieldName = "co"
    classBuilder1 = "Builder1"
}

Factory{
    factoryAbstractClassName = "Creator"
    fieldProduct = "product"
    methodName1 = "factoryMethod"
    methodName2 = "operation"
}

Facade{
    facadeAbstractClassName = "Facade"
    methodName1 = "operation"
}

Chain{
    className = "Receiver"
    numberOfClass = 3
    field1 = "successor"
    methodName1 = "handleRequest"
    methodName2 = "canHandleRequest"
}

Mediator{
    className = "Mediator"
    className2 = "Colleague"
    variableName = "colleague"
    variableName2 = "state"
    variableName3 = "mediator"
    methodName = "mediate"
    methodName2 = "setColleagues"
    methodName3 = "getState"
    methodName4 = "setState"
    methodName5 = "action"

}
Visitor{
    abstractVisitorName = "Visitor"
    abstractElementName = "Element"
    variableName = "visitor"
    variableName2 = "element"
    methodName1 = "accept"
    methodName2 = "operation"
    methodName3 = "visitElement"
    numberOfVisitorMethods = 2
}

Template{
    abstractTemplateName = "Template"
    methodName1 = "primitive1"
    methodName2 = "primitive2"
}