package com.cs474;

import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.*;
import java.util.Arrays;
import java.util.List;
import java.util.Set;

public class testCases {
    static Logger logger;
    static CreateFile file;
    static File f;
    static BufferedReader br;
    static ASTParser ast;

    //Initial the objects
    @Before
    public void init() throws FileNotFoundException {
        file = new CreateFile();
        f = new File("logs/specialTestLog.log");
        logger = LoggerFactory.getLogger("specialTestLog");
        br = new BufferedReader(new FileReader(f));
        ast = new ASTParser();
    }

    //Test the correctness of config
    @Test
    public void testCase1() {
        System.out.println(Configs.test);
        Assert.assertEquals(Configs.test, "test");
    }

    //Test the information which output to the special Test Log with tag Info
    @Test
    public void testCase2() throws IOException {
        logger.info("testCase2");

        String temp;
        String str = null;
        while ((temp = br.readLine()) != null) {
            str = temp;
        }

        Assert.assertEquals(str, "[INFO]:testCase2");
    }

    //Test the information which output to the special Test Log with tag Error
    @Test
    public void testCase3() throws IOException {
        logger.error("testCase3");

        String temp;
        String str = null;
        while ((temp = br.readLine()) != null) {
            str = temp;
        }

        Assert.assertEquals(str, "[ERROR]:testCase3");
    }

    //Test the generate Method by the correct java file name
    @Test
    public void testCase4() {
        String path = "src/test/";
        String name = "Facade";
        file.generateCode(path, name, "abc");
        Assert.assertEquals(CreateFile.newFile.getName(), "Facade.java");
        Assert.assertEquals(CreateFile.newFile.getPath(), "src/test/Facade.java");
    }

    // Test the write information is written into the file that created
    @Test
    public void testCase5() throws IOException {
        String path = "src/test/";
        String name = "Facade";
        file.generateCode(path, name, Configs.test);
        f = new File("src/test/Facade.java");
        br = new BufferedReader(new FileReader(f));

        String temp;
        String str = null;
        while ((temp = br.readLine()) != null) {
            str = temp;
        }

        Assert.assertEquals(str, "test");
    }

    //Test the file that generated by plug-in is in the correct path.
    @Test
    public void testCase6() {
        String path = "src/test/";
        String name = "Facade";
        file.generateCode(path, name, "abc");
        Assert.assertEquals(CreateFile.newFile.getPath(), "src/test/Facade.java");
    }

    //Test AST parser file traversal all
    @Test
    public void testCase7() {
        String path = "src/main/java/com/cs474/";
        List<File> fileArray = ast.traverseAllFiles(path);
        int count = 0;
        for (File f : fileArray) {
            count ++;
        }
        Assert.assertEquals(count, 5);
    }

    //Test AST parser file traversal correctly
    @Test
    public void testCase8() {
        String path = "src/main/java/com/cs474/";
        List<File> fileArray = ast.traverseAllFiles(path);
        String[] s = new String[fileArray.size()];
        int count = 0;
        for (File f : fileArray) {
            s[count++] = f.getName();
        }
        Arrays.sort(s);

        String[] test = {"ASTParser.java", "CodeGeneratorAction.java", "Configs.java", "CreateFile.java", "MethodVisitor.java"};

        Assert.assertArrayEquals("test8", s, test);

    }

    //Test Class name clashes
    @Test
    public void testCase9() {
        String path = "src/main/java/";
        ast.parseTemplate(path);

        Set<String> className = ast.getSetForClassOrInterface();

        Assert.assertTrue(className.contains("hw3"));
    }

    //Test Method name clashes
    @Test
    public void testCase10() {
        String path = "src/main/java/";
        ast.parseTemplate(path);

        Set<String> methodName = ast.getSetForMethod();

        Assert.assertTrue(methodName.contains("main"));
    }
}
